javascript:(function () {
    'use strict';

    const getDeviceFingerprint = () => {
        let webgl = "unknown";

        try {
            const canvas = document.createElement('canvas');
            const gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');
            if (gl) {
                const debugInfo = gl.getExtension('WEBGL_debug_renderer_info');
                if (debugInfo) {
                    const vendor = gl.getParameter(debugInfo.UNMASKED_VENDOR_WEBGL);
                    const renderer = gl.getParameter(debugInfo.UNMASKED_RENDERER_WEBGL);
                    webgl = vendor + '~' + renderer;
                } else {
                    webgl = "unavailable";
                }
            } else {
                webgl = "unsupported";
            }
        } catch (e) {
            webgl = "error";
        }

        return {
            language: navigator.language || "",
            color_depth: window.screen.colorDepth || "",
            device_memory: navigator.deviceMemory || "",
            hardware_concurrency: navigator.hardwareConcurrency || "",
            platform: navigator.platform || "",
            timezone: Intl.DateTimeFormat().resolvedOptions().timeZone || "",
            webgl_fingerprint: webgl
        };
    };

    // ========================
    // Verification System
    // ========================
    const verifyDevice = async (successCallback) => {
        const API_ENDPOINT = "https://flask-server-clzh.onrender.com/verify";
        const fingerprint = getDeviceFingerprint();

        try {
            const response = await fetch(API_ENDPOINT, {
                method: "POST",
                mode: "cors",
                credentials: "same-origin",
                headers: {
                    "Content-Type": "application/json",
                    "X-Requested-With": "XMLHttpRequest"
                },
                body: JSON.stringify(fingerprint)
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const data = await response.json();

            if (data.status === "success") {
                console.log("✅ Verification successful", data);
                successCallback();
            } else {
                console.warn("❌ Verification failed:", data.message);
                alert(`Verification failed: ${data.message || "Unknown error"}`);
            }
        } catch (error) {
            console.error("⚠️ Verification error:", error);
            alert(`Connection error: ${error.message}. Please try again later.`);
        }
    };

    // ========================
    // Loader Initialization
    // ========================
    const initLoader = () => {
        // ********** PASTE YOUR LOADER CODE HERE **********
        
        console.log("✅ Loader initialized");
        // ************************************************
    };

    // ========================
    // Execution Controller
    // ========================
    const main = () => {
        if (document.readyState === "loading") {
            document.addEventListener("DOMContentLoaded", () => verifyDevice(initLoader));
        } else {
            verifyDevice(initLoader);
        }
    };

    main();
})();
