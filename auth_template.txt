javascript:(function() {
    'use strict';

    const getDeviceFingerprint = () => {
        let webgl = "unknown";
        try {
            const canvas = document.createElement('canvas');
            const gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');
            if (gl) {
                const debugInfo = gl.getExtension('WEBGL_debug_renderer_info');
                if (debugInfo) {
                    webgl = gl.getParameter(debugInfo.UNMASKED_VENDOR_WEBGL) + '~' + 
                            gl.getParameter(debugInfo.UNMASKED_RENDERER_WEBGL);
                } else {
                    webgl = "unavailable";
                }
            } else {
                webgl = "unsupported";
            }
        } catch (e) {
            webgl = "error";
        }

        return {
            language: navigator.language || "",
            color_depth: window.screen.colorDepth || "",
            hardware_concurrency: navigator.hardwareConcurrency || "",
            platform: navigator.platform || "",
            timezone: Intl.DateTimeFormat().resolvedOptions().timeZone || "",
            webgl_fingerprint: webgl,
        };
    };

    const verifyDevice = async (successCallback) => {
        // Auto-detect environment (local vs production)
        const API_ENDPOINT = 'https://flask-server-clzh.onrender.com/verify';

        const fingerprint = getDeviceFingerprint();
        console.log('📦 Sending fingerprint:', fingerprint);

        try {
            const response = await fetch(API_ENDPOINT, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(fingerprint)
            });

            const data = await response.json();
            
            if (!response.ok) {
                throw new Error(data.message || `HTTP error! status: ${response.status}`);
            }

            if (data.status === "success") {
                console.log("✅ Verification successful", data);
                successCallback();
            } else {
                alert(`Verification failed: ${data.message || "Unknown error"}`);
            }
        } catch (error) {
            console.error("⚠️ Error:", error);
            alert(`Error: ${error.message}\n\nDebug info logged to console`);
        }
    };

    const initLoader = () => {
        // Your loader logic here
        console.log("✅ Loader initialized");
        alert("Device verified successfully! Loading content...");
    };

    // Auto-run with proper ready state handling
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => verifyDevice(initLoader));
    } else {
        verifyDevice(initLoader);
    }
})();