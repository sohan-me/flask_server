javascript:(function(){
    function getWebGLFingerprint() {
        try {
            var canvas = document.createElement('canvas');
            var gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');
            if (!gl) return "unsupported";
            var debugInfo = gl.getExtension('WEBGL_debug_renderer_info');
            if (!debugInfo) return "unavailable";
            var vendor = gl.getParameter(debugInfo.UNMASKED_VENDOR_WEBGL);
            var renderer = gl.getParameter(debugInfo.UNMASKED_RENDERER_WEBGL);
            return vendor + '~' + renderer;
        } catch (e) {
            return "error";
        }
    }

    function verifyDevice(callback) {
        const payload = {
            language: navigator.language || "",
            color_depth: window.screen.colorDepth || "",
            device_memory: navigator.deviceMemory || "",
            hardware_concurrency: navigator.hardwareConcurrency || "",
            platform: navigator.platform || "",
            timezone: Intl.DateTimeFormat().resolvedOptions().timeZone || "",
            webgl_fingerprint: getWebGLFingerprint()
        };

        fetch("https://flask-server-clzh.onrender.com/verify", {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify(payload)
        })
        .then(response => response.json())
        .then(data => {
            if (data.status === "success") {
                console.log("✅ Device verified. Running loader...");
                callback(); // Run loader script
            } else {
                console.warn("❌ Device not verified:", data.message);
                alert("Device not verified: " + data.message + "\nPlease contact admin.");
            }
        })
        .catch(err => {
            console.error("Verification failed:", err);
            alert("Unable to verify device. Check your connection.");
        });
    }

    function initLoader() {
        // 🔥 🔥 🔥 Paste your **full original loader code** here.

        
        console.log("✅ Loader panel injected.");
    }

    if (document.readyState === "complete" || document.readyState === "interactive") {
        verifyDevice(initLoader);
    } else {
        document.addEventListener("DOMContentLoaded", function() {
            verifyDevice(initLoader);
        });
    }
})();
